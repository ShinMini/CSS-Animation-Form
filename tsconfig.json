{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig.json to read more about this file */

    /* Projects */
    // "incremental": true,                              /* Enable incremental compilation */
    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    // "tsBuildInfoFile": "./",                          /* Specify the folder for .tsbuildinfo incremental compilation files. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
    /* target 키에는 트랜스파일할 대상 자바스크립트의 버전을 설정합니다. 대부분 es5를 키값으로 설정합니다. 
    만일, 최신버전의 node-js를 사용한다면, es6를 설정할 수 있습니다. */
    "target": "es2016",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    // "lib": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    // "jsx": "preserve",                                /* Specify what JSX code is generated. */
    // "experimentalDecorators": true,                   /* Enable experimental support for TC39 stage 2 draft decorators. */
    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h' */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using `jsx: react-jsx*`.` */
    // "reactNamespace": "",                             /* Specify the object invoked for `createElement`. This only applies when targeting `react` JSX emit. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */

    /* Modules */
    /* moduel 키: 타입스크립트 소스코드가 컴파일되어 만들어진 ES5 자바스크립트 코드는 웹 브라우저와 노드제이에서 양쪽에서 모두 동작해야합니다. 
    그런데 웹 브라우저와 노드제이에스는 물리적으로 동작하는 방식이 달라서 여러 개의 파일(즉, 모듈)로
    분할된 자바스크립트 코드 또한 웹 브라우저와 노드제이에서 양쪽에서 각각 다르게 동작합니다. 
    자바스크립트 모듈은 웹 브라우저에서는 AMD(asychronous module definition)방식으로 동작하고,
    node-js 처럼 web brower가 아닌 환경에서는 CommonJS 방식으로 동작합니다. 
    tsconfig.ts file 에서 compilerOptions 항목의 module 키는 동작 대상 플랫폼이 
    web browser인지 node-js 인지를 구분해 그에 맞는 module 방식으로 compile하려는 목적으로 설정합니다. 
    comile run platform에 따라 Web일경우: amd값을, node-js일 경우, commonjs값으로 설정할 수 있습니다. 

    */
    "module": "commonjs",                                /* Specify what module code is generated. */
    // "rootDir": ".",                                  /* Specify the root folder within your source files. */
    /* moduleResolution 키: moudle 키의 값이 commonjs이면 node-js에서 동작하는 것을
    의미하므로, moduelResolution 키값은 항상 node로 설정합니다. 반면에 moudle 키값이 amd이면, 
    moduelResolution 키 값은 classic으로 설정합니다.  */
    "moduleResolution": "node",                       /* Specify how TypeScript looks up a file from a given module specifier. */

    // marking!!!
    /* baseUrl과 outDir 키에는 트랜스파일된 ES5 자바스크립트 파일을 저장한는 디렉터리를 설정합니다. 
    tsc는 tscofig.json 파일이 있는 디렉터리에서 실행됩니다.
    따라서 현재 디렉터리 (current directory)를 의미하는 "."로 baseUrl 키값을 설정하는 것이 보통입니다.
    OutDir키는 baseUrl 설정값을 기준으로 했을 때 하위 디렉터리의 이름입니다.
    앞서 이 키는 dist라는 값을 설정했으므로 빌드된 결과가 dist 디렉터리에 만들어집니다.  */
    "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
    "outDir": "dist",                                   /* Specify an output folder for all emitted files. */

    // UserChange!!!
    /* path 키에는 소스 파일의 import 문에서 from 부분을 해석할 때 찾아야 하는 디렉터리를 설정합니다. 
    import 문이 찾아야 하는 소스가 외부 패키지 이면, node_modules 디렉터리에서 찾아야 하므로 키값에 "node_modules/*"도 포함했습니다.
    */
    "paths": { "*": ["./node_modules/*"]},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [],                                  /* Specify multiple folders that act like `./node_modules/@types`. */
    // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
    // "resolveJsonModule": true,                        /* Enable importing .json files */
    // "noResolve": true,                                /* Disallow `import`s, `require`s or `<reference>`s from expanding the number of files TypeScript should add to a project. */

    /* JavaScript Support */
    // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files. */
    // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from `node_modules`. Only applicable with `allowJs`. */

    /* Emit */
    // "declaration": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */

    // Marking!!!
    /* sourceMap 키값이 ture이면 트랜스 파일 디렉터리에는 .js 파일 이외에도 .js.map 파일이 만들어집니다. 
    이 소스맵 파일은 변환된 자바스크립트 코드가 타입스크립트 코드의 어디에 해당하는 지를 알려줍니다. 
    소스맵 파일은 주로 디버깅할 때 사용됩니다. */
    "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */

    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If `declaration` is true, also designates a file that bundles all .d.ts output. */

    // marking!!!

    // "removeComments": true,                           /* Disable emitting comments. */
    // "noEmit": true,                                   /* Disable emitting files from a compilation. */
    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "importsNotUsedAsValues": "remove",               /* Specify emit/checking behavior for imports that are only used for types */

    // marking!!! 
    /* downlevelIteration 키 , generator(생성기)라는 타입스크립트 구문을 정상적으로, 
    동작시키기 위해서는 "downlevelIteration 키 값을 반드시 ture로 설정해야합니다. */
    "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */

    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* Disable emitting declarations that have `@internal` in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like `__extends` in compiled output. */
    // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
    // "preserveConstEnums": true,                       /* Disable erasing `const enum` declarations in generated code. */
    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */
    // "preserveValueImports": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */

    /* Interop Constraints */
    // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
    // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */

    //marking!!!
    /* esModuleInterop 오픈 소스 자바스크립트 라이브러리 중에는 웹 브라우저에서 동작한다는 가정으로 만들어 진 것이 있는데,
    이들은 CommonJS 방식으로 동작하는 타입스크립트 코드에 혼란을 줄 수 있습니다. 
    예를 들어 외부 library chance 가 바로 AMD 방식(웹 compile)을 전제로 해서 구현된 라이브러리입니다.
    따라서 chance 패키지가 동작하려면, esModuleInterop 키 값ㅇ르 반드시 ture로 설정해야합니다. */
    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */

    /* Type Checking */
    "strict": true,                                      /* Enable all strict type-checking options. */
    
    // marking!!!
    "noImplicitAny": false,                            /* Enable error reporting for expressions and declarations with an implied `any` type.. */

    // "strictNullChecks": true,                         /* When type checking, take into account `null` and `undefined`. */
    // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // "strictBindCallApply": true,                      /* Check that the arguments for `bind`, `call`, and `apply` methods match the original function. */
    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */

    /* typesciprt compiler는 기본적으로 f(a, b)처럼 매개변수 a, b에 타입을 명시하지 않은 코드일 경우, 
    f(a: any, b: any)처럼 암시적으로 any 타입을 설정한 것으로 간주합니다.
    이런 형태의 코드는 타입스크립트 언어의 장점을 사용하는 것이 아니므로, 
    코드에 문제가 있음을 에러메세지로 compile 시 , console 창을 통해, 알려줍니다.
    하지만 이러한 방식의 오류 메세지는 직관적이지 아니므로, noImplicitAny 키 값을 false로 설정해,
    메세지를 보이지 않게 설정할 수 있습니다.  */
    "noImplicitThis": true,                           /* Enable error reporting when `this` is given the type `any`. */
    // "useUnknownInCatchVariables": true,               /* Type catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
    // "noUnusedLocals": true,                           /* Enable error reporting when a local variables aren't read. */
    // "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read */
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
    // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
    // "noUncheckedIndexedAccess": true,                 /* Include 'undefined' in index signature results */
    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type */
    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
  }
}
